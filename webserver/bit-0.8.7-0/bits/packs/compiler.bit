/*
    compiler.bit - Compile package for Bit

    This is a fairly complex package due to the differences between compilers and operating systems.
 */
Bit.pack({
    compiler: {
        description: 'C/C++ Compiler',
        path: function (pack) {
            if (bit.platform.like == 'windows') {
                path = findWindowsCompiler(pack)

            } else if (bit.platform.os == 'vxworks') {
                path = findVxCompiler(pack)

            } else {
                path = findPosixCompiler(pack)
            }
            return path
        },
        config: function (pack) {
            if (!bit.options.configure) {
                let settings = getDefaultSettings()
                Bit.load({settings: settings})
            } else {
                testCompilerCapabilities()
            }
            setCompilerOptions(pack, bit.settings)
        },
        generate: function (pack) {
            if (bit.platform.like == 'windows') {
                pack.path = 'cl'
            } else if (bit.platform.os == 'macosx') {
                pack.path = 'clang'
            } else if (bit.platform.os == 'vxworks') {
                pack.path = 'cc$(subst x86,pentium,$(ARCH))'
            } else {
                pack.path = 'gcc'
            }
            let settings = getDefaultSettings()
            Bit.load({ settings: settings })
            setCompilerOptions(pack, settings)
        },
        after: [ 'vxworks', 'winsdk' ],
    },
})


function findWindowsCompiler(pack) {
    let search
    let vsdir: Path
    let path: Path? = bit.packs.compiler.withpath

    /*
        Test here because may come here when cross generating
     */
    if (Config.OS == 'windows') {
        /*
            The VS bin+lib directories contain 32 bit compilers and libraries
            The native VS 64 bit versions are under bin/amd64 and lib/x64
            The cross compile for 64 bit on 32 bit systems is under bin/x86_64 and lib/x64
            The cross compile for 32 bit on 64 bit systems can use the default 32 bit bin + lib
            See: http://msdn.microsoft.com/en-us/library/x4d2c09s(v=vs.80).aspx
            Also: http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx
         */
        search = bit.dir.programFiles32.files('Microsoft Visual Studio*/VC/Bin').sort().reverse()
        if (!search || search.length == 0) {
            throw 'Cannot find Visual Studio installation'
        }
        vsdir = Path(search[0]).parent.parent
        if (bit.platform.arch == 'x64') {
            if (Config.CPU == 'x64') {
                /* Running on a 64 bit */
                search = search.map(function(e) Path(e).join('amd64'))
            } else {
                /* Cross compile for 64 bits on 32 bits */
                search = search.map(function(e) Path(e).join('x86_amd64'))
            }
        }
    }
    let vsbin, vslib, version
    if (Config.OS != 'windows') {
        path = 'cl.exe'
        vsdir = Path('$(VS)')
        vsbin = vsdir.join('VC/Bin'),
        vslib = vsdir.join('VC/lib')
        version = '0'
    } else {
        path = probe(path || 'cl.exe', {fullpath: true, search: search})
        vsbin = path.dirname
        if (bit.platform.arch == 'x64') {
            vslib = vsbin.join('../../lib/amd64').normalize
        } else {
            vslib = vsbin.join('../lib').normalize
        }
        version = vsdir.name.match(/\d*\.\d/)[0]
        pack.definitions = [ 'BIT_VISUAL_STUDIO_VERSION="' + version + '"' ]
    }
    pack.version = version
    pack.crt = version.replace('.', '')
    pack.dir = vsdir
    pack.search = search

    bit.env.PATH += [
        vsbin,
        vsdir.join('Common7/IDE'),
        vsdir.join('Common7/Tools'),
        vsdir.join('SDK/v3.5/bin'),
        vsdir.join('VC/VCPackages'),
    ]
    bit.env.INCLUDE += [
        vsdir.join('VC/INCLUDE')
    ]
    bit.env.LIB += [ vslib ]
    return path
}


function findVxCompiler(pack) {
    let path: Path? = bit.packs.compiler.withpath
    let platform = bit.platform
    if (!path) {
        if (platform.arch.match(/^i386$|^i486$$/)) {
            path = 'cc386'
        } else if (platform.arch.match(/^i[56]86$|^pentium$|^x86$/)) {
            path = 'ccpentium'
        } else if (platform.arch.match(/^ppc/)) {
            path = 'ccppc'
        } else if (platform.arch.match(/^xscale|^arm/)) {
            path = 'ccarm'
        } else if (platform.arch.match(/^68/)) {
            path = 'cc68k'
        } else if (platform.arch.match(/^sh/)) {
            path = 'ccsh'
        } else if (platform.arch.match(/^mips$/)) {
            path = 'ccmips'
        } else {
            throw 'Unsupported CPU architecture: ' + platform.arch
        }
    }
    path = probe(path, {fullpath: true, search: bit.packs.vxworks.search})
    return path
}


function findPosixCompiler(pack) {
    let path: Path? = bit.packs.compiler.withpath || ((bit.platform.os == 'macosx') ? 'clang' : 'gcc')
    return probe(path, {fullpath: true})
}


/*
    Test compiler capabilities and determine a minimal set of compiler switches to store in bit.settings
 */
function testCompilerCapabilities() {
    let platform = bit.platform
    let settings = getDefaultSettings()
    let cc = bit.packs.compiler.path

    if (Config.OS != platform.os) {
        /* Cannot sleuth when generating for a cross-platform */

    } else if (cc && (platform.like == 'unix' || (platform.os == 'vxworks' && Config.OS == 'linux'))) {
        settings.hasDoubleBraces = compile(cc, '', '#include <stdarg.h>\nva_list d = {{0}};')
        //  UNUSED MOB - mtune not used?
        settings.hasMtune = compile(cc, '-mtune=generic', 'int main() { return 0;}')
        settings.hasStackProtector = compile(cc, '-fno-stack-protector', 'int main() { return 0;}')
        settings.hasSync = compile(cc, '', '#include <stdio.h>\nint main() { __sync_synchronize(); return 0; }')
        settings.warnUnused = compile(cc, '-Wno-unused-result',
            '#include <stdio.h>\n#include <stdlib.h>\nint main() { realloc(0, 1024); return 0; }')
        settings.warn64to32 = compile(cc, '-Wshorten-64-to-32', 'int main() { return 0;}')

        if (platform.os != 'vxworks') {
            settings.hasLibRt = compile(cc, '',
                '#define _GNU_SOURCE\n#include <time.h>\nint main() { struct timespec tv; clock_gettime(CLOCK_REALTIME, &tv); return 0; }')
            settings.hasDynLoad = compile(cc, '',
                '#include <stdio.h>\n#include <dlfcn.h>\nint main() { dlopen(\"test.so\", 0); return 0; }')
            settings.hasLibEdit = compile(cc, '',
                '#include <histedit.h>\nint main() { history_init(); return 0; }')
            settings.hasMmu = compile(cc, '',
                '#include <stdio.h>\n#include <unistd.h>\nint main() { fork(); return 0; }')
            settings.hasPam = compile(cc, '',
                '#include <security/pam_appl.h>\nint main() { void *x = pam_start; return x != 0; }')
            settings.hasSyncCas = compile(cc, '',
                '#include <stdio.h>\nint main() { void *ptr = 0; __sync_bool_compare_and_swap(&ptr, ptr, ptr); return 0; }')
            settings.hasUnnamedUnions = compile(cc, '', 
                '#include <stdio.h>\nint main() { struct test { union { int x; int y; };}; return 0; }')
        }
    }
    Bit.load({ settings: settings })
}

function setCompilerOptions(pack, settings) {
    let platform = bit.platform
    let arch = platform.arch

    pack.compiler =  [ ]
    pack.defines =   [ ]
    pack.includes =  [ bit.dir.inc ]
    pack.linker =    [ ]
    pack.libpaths =  [ bit.dir.bin ]
    pack.libraries = [ ]

    if (settings.warnUnused) {
        pack.compiler.push('-Wno-unused-result')
    }
    if (settings.warn64to32) {
        pack.compiler.push('-Wshorten-64-to-32')
    }
    if (settings.hasLibRt) {
        pack.libraries.push('rt')
    }
    if (settings.debug) {
        pack.defines.push('BIT_DEBUG')
    }
    if (platform.like == 'unix') {
        if (settings.hasDynLoad) {
            pack.libraries.push('dl')
        }
        pack.compiler.push('-Wall')
        pack.libraries.push('pthread', 'm')
        if (settings.debug) {
            pack.compiler.push('-g')
            pack.linker.push('-g')
        } else if (settings.tune == 'size') {
            pack.compiler.push('-Os')
        } else {
            pack.compiler.push('-O2')
        }
        if (platform.os != 'macosx') {
            /* GCC not mac */
            pack.compiler.push('-fPIC')
            pack.defines.push('_REENTRANT', 'PIC')
            if (arch.startsWith('arm')) {
                pack.compiler.push('-mno-sched-prolog')
            } else if (arch.startsWith('ppc')) {
                pack.defines.push('_GNU_TOOL')
            }
        }
    }

    if (platform.os == 'linux') {
        pack.linker.push('-rdynamic', '-Wl,--enable-new-dtags', '-Wl,-rpath,$ORIGIN/')

    } else if (platform.os == 'macosx') {
        pack.compiler.push('-Wno-deprecated-declarations')
        pack.linker.push('-Wl,-rpath,@executable_path/', '-Wl,-rpath,@loader_path/')

    } else if (platform.os == 'solaris') {
        pack.libraries.push('lxnet', 'rt', 'socket')

    } else if (platform.os == 'vxworks') {
        let cpu = platform.cpu
        if (!cpu) {
            if (arch == 'i386') {
                cpu = 'I80386'
            } else if (arch == 'i486') {
                cpu = 'I80486'
            } else if (arch.match(/^i.86$|^x86$/)) {
                cpu = 'PENTIUM'
            } else {
                cpu = arch.toUpper()
                if (arch == 'mips') {
                    cpu = 'MIPS32'
                } else if (arch == 'arm') {
                    cpu = 'ARM7TDMI'
                }
            }
        }
        pack.defines.push('VXWORKS', 'RW_MULTI_THREAD', '_GNU_TOOL', 'CPU=' + cpu.toUpper())
        pack.compiler.push('-fno-builtin', '-fno-defer-pop', '-fvolatile')
        if (arch.match(/mips/)) {
            /* Don't use mips global pointer */
            pack.compiler.push('-G 0')
        }
        pack.includes += bit.packs.vxworks.includes
        pack.libraries.push('gcc')
        pack.linker.push('-Wl,-r')

    } else if (platform.os == 'windows') {
        pack.compiler.push('-nologo', '-GR-', '-W3')
        pack.defines.push('_REENTRANT', '_MT')
        pack.libraries.push('ws2_32.lib', 'advapi32.lib', 'user32.lib', 'kernel32.lib', 'oldnames.lib', 'msvcrt.lib', 'shell32.lib')
        pack.linker.push('-nologo', '-nodefaultlib', '-incremental:no')
        if (settings.debug) {
            pack.compiler.push('-Zi', '-Od', '-MDd')
            pack.linker.push('-debug')
        } else {
            pack.compiler.push('-O2', '-MD')
        }
        pack.subsystem = {
            exe: 'console',
            gui: 'windows',
        }
        pack.entry = {
            exe: 'mainCRTStartup',
            gui: 'WinMainCRTStartup',
        }
        if (platform.arch == 'x64') {
            pack.linker.push('-machine:x64')
            pack.entry.lib = '_DllMainCRTStartup'
        } else {
            pack.linker.push('-machine:x86')
            pack.entry.lib = '_DllMainCRTStartup@12'
        }
    }
}


/*
    Test compile to determine supported compiler switches. This is only used on gcc.
 */
function compile(cc: Path, command: String, contents: String = null): Boolean {
    let file, cmd
    let home = App.dir
    try {
        file = System.tmpdir.join('bit-' + App.pid + '.c')
        App.chdir(file.dirname)
        if (contents) {
            if (bit.platform.os == 'vxworks') {
                contents = '#define _VSB_CONFIG_FILE "vsbConfig.h\n' + contents
            }
            file.write(contents + '\n')
            command += ' -c ' + file
        }
        command = '' + cc + ' -Werror -Wall ' + command
        strace('Compile', command)
        strace('Program', contents)
        cmd = new Cmd
        cmd.env = bit.env
        cmd.start(command)
        if (cmd.status != 0) {
            strace('Result', '  ' + cmd.error)
        }
    } finally {
        if (file) {
            file.remove()
            file.basename.replaceExt('o').remove()
        }
    }
    return cmd.status == 0
}


function getDefaultSettings() {
    let platform = bit.platform
    let settings
    if (platform.like == 'windows') {
        settings = {
            hasDynLoad: true,
            hasLibEdit: false,
            hasLibRt: false,
            hasMmu: true,
            hasUnnamedUnions: true,
        }
    } else if (platform.os == 'linux') {
        settings = {
            hasDoubleBraces: false,
            hasDynLoad: true,
            hasLibEdit: false,
            hasLibRt: true,
            hasMmu: true,
            hasMtune: true,
            hasPam: false,
            hasStackProtector: true,
            hasSync: true,
            hasSyncCas: false,
            hasUnnamedUnions: true,
            warn64to32: false,
            warnUnused: true,
        }
    } else if (platform.os == 'macosx') {
        settings = {
            hasDoubleBraces: true,
            hasLibEdit: true,
            hasLibRt: false,
            hasDynLoad: true,
            hasMmu: true,
            hasMtune: true,
            hasPam: true,
            hasStackProtector: true,
            hasSync: true,
            hasSyncCas: true,
            hasUnnamedUnions: true,
            warn64to32: true,
            warnUnused: true,
        }
    } else if (platform.os == 'vxworks') {
        settings = {
            hasDoubleBraces: false,
            hasLibEdit: false,
            hasLibRt: false,
            hasDynLoad: true,
            hasMmu: true,
            hasMtune: false,
            hasPam: false,
            hasStackProtector: true,
            hasSync: false,
            hasSyncCas: false,
            hasUnnamedUnions: true,
            warn64to32: false,
            warnUnused: false,
        }
    } else {
        settings = {
            hasDoubleBraces: true,
            hasLibEdit: false,
            hasLibRt: false,
            hasDynLoad: true,
            hasMmu: true,
            hasMtune: true,
            hasPam: false,
            hasStackProtector: true,
            hasSync: false,
            hasSyncCas: false,
            hasUnnamedUnions: true,
            warn64to32: false,
            warnUnused: false,
        }
    }
    settings.debug = true
    return settings
}
