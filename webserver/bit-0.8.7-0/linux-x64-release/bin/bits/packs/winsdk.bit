/*
    winsdk.bit - Windows SDK
 */

Bit.pack({
    winsdk: {
        description: 'Windows SDK',
        path: function (pack) {
            let path: Path
            let search = pack.withpath
            if (!search) {
                /* Windows SDK 8 is under /Program Files (x86)/Windows Kits/8.0 */
                search = bit.dir.programFiles32.files('Windows Kits/*').sort().reverse()
                if (search.length) {
                    pack.winkit = true
                } else {
                    /* Old Windows SDK is under /Program Files (x86)/Microsoft SDKs/Windows */
                    search = bit.dir.programFiles32.files('Microsoft SDKs/Windows/*').sort().reverse()
                }
                if (search.length == 0 && Config.OS == 'windows') {
                    throw 'Cannot find the Windows SDK. Download from http://msdn.microsoft.com/en-us/windows/desktop/hh852363.aspx'
                }
            }
            let bin
            if (pack.winkit) {
                path = probe('Include/um/WinBase.h', {fullpath: true, search: search})
                path = path.dirname.dirname.dirname
                bin = path.join('Bin', bit.platform.arch).portable
            } else {
                path = probe('Include/WinBase.h', {fullpath: true, search: search})
                path = path.dirname.dirname
                bin = path.join('Bin').portable
            }
            pack.search = bin
            return path
        },

        config: function (pack) {
            let bin = pack.search
            let path: Path? = pack.path
            if (pack.winkit) {
                bit.env.PATH = [ bin.join(bit.platform.arch) ]
                bit.env.INCLUDE = [ path.join('Include/um').portable, path.join('Include/shared') ]
                let winver = path.basename.replace('.0', '')
                bit.env.LIB = [ path.join('Lib', 'win' + winver, 'um', bit.platform.arch).portable ]
            } else {
                if (bit.platform.arch == 'x64') {
                    bit.env.PATH = [ bin.join('x64'), bin ]
                } else {
                    bit.env.PATH = [ bin ]
                }
                bit.env.INCLUDE = [ path.join('Include').portable ]
                if (bit.platform.arch == 'x64') {
                    bit.env.LIB = [ path.join('Lib/x64').portable ]
                } else {
                    bit.env.LIB = [ path.join('Lib').portable ]
                }
            }
        },
    },
})
