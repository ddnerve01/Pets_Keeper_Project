BIT(1)                           User Commands                          BIT(1)



NAME
       bit - Build It! -- Utility to build and manage programs

SYNOPSIS
       bit [--benchmark] [--configuration] [--configure /path/to/source]
           [--continue]   [--debug]   [--deploy   directory]  [--depth  level]
           [--diagnose]
           [--dump] [--endian [big|little]] [--file file.bit] [--force]
           [--gen [make|nmake|sh|vs|xcode|main|start]] [--get field] [--help]
           [--import] [--keep] [--log logSpec] [--nocross] [--overwrite]
           [--out path] [--platform os-arch] [--pre] [--prefix dir=path]
           [--prefixes debian|embedthis|opt] [--profile [debug|release|...]]
           [--quiet] [--rebuild] [--reconfigure] [--release] [--rom]
           [--set [feature=value]] [--sets [set,set,...]]  [--show] [--static]
           [--unicode] [--unset feature] [--version] [--verbose]
           [--with PACK[=PATH]] [--without PACK] [targets|actions] ...

DESCRIPTION
       The bit command is modern replacement for the venerable make and not so
       popular autoconf utilities.  Bit manages the building of  programs  and
       products  by effectively determining which pieces have been updated and
       thus which components need to be rebuilt. It easily handles direct com-
       pilation and generation of projects.


WHY BIT?
       Many projects rely on autoconf to configure products and make to build.
       But autoconf is a baroque maze of scripts and make is low-level, scales
       poorly  and  provides little support for easily building executable and
       libraries in a cross platform  manner.  Furthermor,  neither  of  these
       tools work well for Windows or embedded platforms like VxWorks.  Conse-
       quently, creating portable Makefiles and  autoconf  scripts  that  will
       work  on  a  variety  of  platforms and support cross-compilation is an
       exercise in patience. Often the result is slow, fragile build  systems,
       especially on Windows.

       Bit  replaces both autoconf and make with a single utility: 'bit'.  Bit
       provides a higher level of abstraction to easily specify the targets to
       build  (libraries, executables, files and script output).  It can build
       directly on Linux, Mac or Windows and cross  compile  for  other  plat-
       forms. It will generate native projects for Visual Studio, XCode, Make,
       Nmake and shell scripts. Bit builds  fast  without  the  complexity  of
       autoconf and make.

       Bit  was initiated after evaluating Make, CMake and GYP for use by App-
       web and Ejscript in an embedded, cross-compilation  environment.  While
       all  three can be made to work, at Embedthis, we were expending a large
       percentage of time on the build system and less on the actual  product.
       Our design goals were:

           . Create a build too to be used by Embedthis for its own products
           . Be portable across the major Unix platforms and Windows
           .  Easily manage cross-compilation and cross-compilers for embedded
       targets
           . Generate native projects for IDE integration
           . Build quickly, reliably and flexibly on Windows without requiring
       Cygwin
           .  Support for the entire build cycle: C dependencies, compilation,
       test and packaging
           . Support  modular  discovery,  configuration  and  integration  of
       external third-party packages
           . Be hackable and extendable

FEATURES
       Bit  is implemented primarily as a single Ejscript of some 4K lines and
       is very hackable.  It has the following major features:

           . Configuration and component discovery (replaces autoconf)
           . Compiler capability sleuthing
           . Generation of a configuration source header (bit.h)
           . Generation of Xcode, Visual Studio, Make, Nmake and shell  script
       projects
           . Automatic C/C++ source code dependencies
           . Projects can aggregate multiple bit files without using recursion
           . Cross platform. Easily handles Windows, Linux and Mac builds
           . Easy cross-compilation
           . Building outside source tree for read-only file systems
           . Bit files are Javascript  source  and  are  easily  modified  and
       extended
           . Multiple build profiles (debug, release, ...)
           . Very fast configuration and building, even on windows

NICE BITS
       While Bit has a strong feature set, there are some characteristics that
       make building with Bit especially nice:

           . Unified project view. No "make" style recursion required.
           . Bit configuration may be comprised by multiple bit files
           . Bit file targets and scripts are relative to their own directory
           . Targets can be named symbolically not just by the target path.
           . Bit provides a "why" option (bit -why) to display  why  a  target
       was or was not rebuilt
           .  Bit  files  and  targets  intelligently inherit of outer project
       properties
           . Bit scripts run using the working directory of the bit file
           . Detailed documentation




OVERVIEW
       A bit file is a Javascript file with a '.bit'  extension  that  invokes
       Bit.load()  to process a set of build instructions.  The build instruc-
       tions are expressed as a  Javascript  object  literal  that  Bit.load()
       integrates into the master set of build instructions.

            Bit.load({
                targets: {
                    /* Build the rocket executable */
                    rocket: {
                        type: 'exe',
                        sources: ['*.c'],
                    },
                }, })

       To build the rocket, enter:

            bit rocket


INVOCATION
       When  bit is invoked, it searches for a 'start.bit' file in the current
       directory. If one if not found, it searches  up  the  parent  directory
       chain  for one. Bit then loads this 'start.bit' file and commences pro-
       cessing its build instuctions. A 'start.bit' may in turn load other bit
       files.


STANDALONE USES
       A standalone start.bit file may be used to express simple build targets
       that do not requiring any prior  configuration  step.  The  'start.bit'
       file contains targets that specify the recipies to build those targets.


CONFIGURED PRODUCTS
       Some products require a configuration phase prior to building with Bit.
       Configuration  involves  discovering the tools and components available
       on the current system and the available compiler  tool  chain  support.
       For  configured  products, bit is first invoked with a "configure" tar-
       get. Bit then reads a 'main.bit' file which describes the project,  and
       generates  a  'start.bit' and platform bit file that describes the sys-
       tem.


TARGETS
       Bit is typically invoked with zero or more targets to build. If invoked
       with zero targets, Bit will build all the out-of-date targets. If a one
       or more targets are specified, only those targets will be brought up to
       date.

       To build all targets:
            bit

       To build several named targets:
            bit libengine librocket space-program

       Bit pre-defines several targets:

           . configure - To configure prior to building
           . build - To build all targets
           . compile - Same as 'build'
           . clean - To clean built targets and prepare for rebuilding
           . rebuild - Clean and build


CONFIGURING
       To  configure  a product before building, run Bit using the 'configure'
       target or alternatively use the '-config'  switch.   When  configuring,
       Bit will load a 'main.bit' file and use the details from the 'settings'
       properties to tailor the configuration. The settings provide the  prod-
       uct name, title, company, version number and what required and optional
       extension packages that should be discovered.

       For example, this is a typical 'settings' configuration.

            settings: {
                product: 'mpr',
                title: 'Multithreaded Portable Runtime',
                company: 'Embedthis',
                version: '4.0.5',
                buildNumber: '4',
                '+required': [ 'utest' ],
                '+discover':   [   'doxygen',   'man',   'man2html',    'md5',
            'matrixssl', 'openssl', 'ssl' ],
            },

       The  'required' property defines the extensions that are required to be
       present on the system to build. The  these  properties  indicates  that
       these  values should be added to pre-defined values. The buildNumber is
       a build patch number.


CROSS COMPILING
       To build a product for platform different to that of the  local  system
       is called cross compiling. Sometimes this cross compiling is just for a
       different instruction set (say x64 instead of x86). Other times  it  is
       for a completely different operating system and/or CPU architecture. In
       such cases a cross-compiler may be required to  build  for  the  target
       platform.

       Bit  supports cross compiling via the "bit -platform OS-ARCH configure"
       switch. This adds a platform to the list of platforms to be  made  when
       building.  Multiple platforms may be specified and the 'local' platform
       alias may be used for the local development platform.

       Some products require local building to make tools that are required to
       build  for  any  platform.  These products add a "platforms: ['local']"
       property to their settings collection in the main.bit file. This  auto-
       matically adds the local platform to the platforms list and is the same
       as adding '-platform local' on the command line when configuring.

            bit --platform windows-x64 -configure .

       This will create a windows-x64.bit configuration file  and  a  start.es
       that references it. The platform switch does not need to be respecified
       after configuration.


PROJECT GENERATION
       Bit can generate generate complete project files  for  building  using:
       make,  nmake, Visual Studio, Xcode or plain shell scripts. Bit uses the
       '--gen' switch to specify the projects to  build.  Bit  is  capable  of
       cross-generating  projects  for  non-native platforms. For example: you
       can generate an Xcode project for Mac OS X on a Windows system.

            bit -continue -platform macosx-x64 configure -gen xcode,make,sh


       This will generate Xcode, make and shell script projects for a Mac OS X
       64-bit.  The  continue switch indicates that generation should continue
       even if the required compilers and build tools are not present  on  the
       development system.


DEPENDENCIES
       Bit  targets  can depend on other targets that must be built first. Bit
       targets have a name which may be depended upon by another  target.  For
       example:

            targets {
                first: {
                    build: "print('Build First')",
                },
                second: {
                    depends: ['first'],
                    build: "print('Build Second')",
                }, }

       Before Bit begins building, it parses the entire bit file configuration
       and determines which targets depend on what.  It then builds  the  tar-
       gets  in  the required build order. It successfully detects and handles
       dependency loops.


DEFAULTS
       Often  targets  need  very  similar  configuration.  Bit   provides   a
       'defaults' set of properties that are inherited by all targets. It also
       provides an 'internal' set of properties that are inherited by only the
       targets in the same bit file. For example:

            defaults: {
                '+defines': [ 'TUNE=SPEED ],
                '+libraries': [ 'math' ],
            }

       This  will  use  the  'TUNE=SPEED'  compiler  define when compiling all
       source files, and the 'math'  library  when  linking  executables  (and
       libraries on some systems).


OVERRIDING
       Bit has default command flags for the compiler, linker and other tools.
       These can be overridden by providing environment  variables  containing
       alternate  flags  to  use. Use CFLAGS to provide compiler flags, DFLAGS
       for pre-processor definitions, IFLAGS for compiler  include  paths  and
       LDFLAGS  for  linker  flags.  If  these  flags are provided to bit when
       building, they apply to that run only. If the flags  are  provide  when
       configuring,  they  are  saved in the generated platform build file and
       apply to all subsequent runs.


DEBUGGING
       With Make and other build tools, it is difficult  to  determine  why  a
       target is or is not being built. Bit provides a '--why' switch to diag-
       nose problematic build sequences. This switch displays the  reason  why
       each target was or was not built.

       In  a  complex  project containing many Bit files, it can be helpful to
       see the entire bit configuration in one file. Use the  '--dump'  switch
       to save a copy of the entire configuration. In the dump, build defaults
       are fully expanded to each target contains the  expanded  configuration
       that will be used to build the target.

       By  default, Bit builds relativley quietly and stops on the first build
       error. To see the commands Bit is issuing, use the '--show' switch.  To
       build  totally  quietly, use the '--quiet' switch. To continue building
       despite build errors, use the '--continue' switch.


OPTIONS
       --benchmark
              Measure the elapsed time to run bit.


       --configuration
              Display the current configuration. This displays the  configura-
              tion for each package and the build settings.


       --configure /path/to/source/tree
              Configure  the  project to prepare for building. This configures
              Bit for building the project based on the instructions specified
              in  a 'main.bit' located in the specified path source tree. When
              run, bit will create a platform configuration bit file, a  build
              output  directory  and bit.h header. The configuration directory
              is of the form: OS-ARCH-PROFILE where OS may be freebsd,  linux,
              macosx,  solaris,  vxworks,  windows and ARCH is arm, mips, ppc,
              x64 or x86. PROFILE is typically set to debug  or  release.  For
              example: 'macosx-x86_64-debug'. The configuration bit file omits
              the PROFILE. For example: 'linux-x86.bit'.

              Bit will use the settings.required and settings.discover proper-
              ties  in  the main.bit for a list of packages to use.  When con-
              figuring, bit will search for these  packages  and  will  create
              definitions in the configuration bit file for later use.


       --continue
              Continue  to build despite any build errors. Normal operation is
              to stop building if any build errors are encountered.


       --debug
              Same as --profile debug


       --deploy directory
              Install the product to the deployment directory. This is  useful
              to  stage the required files to install on a system.  Use --sets
              to define the file sets to deploy.


       --depth level
              Set the unit test depth level.


       --diagnose
              Run bit with stack backtrace display on errors.


       --dump Dump the aggregate bit configuration  into  a  single  dump  bit
              file.


       --endian [big|little]
              Set  the  CPU  endianness. This is normally detected by the com-
              piler but may be overridden by this switch.


       --file bitfile
              Use the  alternate  named  bit  file  instead  of  start.bit  or
              main.bit.


       --force
              Override warnings and proceed with the operation.


       --gen [make|nmake|sh|vs|xcode|main|start]
              Generate  files.  This  option  can  be used to generate initial
              start.bit or main.bit files or IDE project and  makefiles.   The
              --gen  start,  option can be used to create a stand-alone sample
              start.bit file. The --gen main, option can be used to  create  a
              sample main.bit file when starting a new product.  Project files
              are created under the 'projects' directory.   The  projects  are
              based   on   the   current  configuration.  If  cross-generating
              projects, you will typically need to also use -configure.


       --get field
              Get a field from the Bit DOM. This can be used  to  display  any
              Bit  file value. Unlike --set, this applies to any Bit DOM value
              and not just to settings. For example: bit  --get  settings.ver-
              sion.


       --import
              Import  the  standard  bit configuration bits directory into the
              local source tree.


       --keep Keep some intermediate build files. This is  currently  used  by
              some documentation generation targets.


       --log logName[:logLevel]
              Specify  a file to log internal execution messages. Bit will log
              execution related trace to the log file. The log level specifies
              the  desired  verbosity  of output. Level 0 is the least verbose
              and level 9 is the most. The '-v' switch is an alias for  '--log
              stderr:2'.


       --nocross
              Don't  cross-build,  rather  build  natively for the development
              system. This is useful when configuring for a platform that  can
              build  and  run natively on the development system. For example:
              Linux 64-bit  systems  can  run  32-bit  applications,  so  'bit
              --nocross   --platform  linux-x86  configure'  may  be  able  to
              directly target  the  32-bit  platform  without  cross-building.
              Note:  Products that require the building and execution of local
              tools MUST be able to run those tools on the development system.


       --out path
              Save  Bit  trace  output  to a file instead of displaying to the
              console.


       --platform os-arch
              Add a platform to build for  cross-compilation.  Multiple  plat-
              forms  can be added. You may use 'local' for the local platform.
              Options specified after the platform apply to  the  prior  plat-
              form. For example:

                  bit  --platform linux-x86 --without all --platform linux-arm
              --with ejscript configure


       --pre  Pre-process a source file to stdout.


       --prefix dir=path
              Set the installation directory prefix. Various products  utilize
              different  prefixes.  Typical  prefixes  are: root, base, state,
              data, app, vapp, bin, etc, inc, log, spool, src, web.  For those
              familiar  with autoconf, the major autoconf prefixe switches are
              supported and mapped as follows: --prefix to root,  --bindir  to
              bin,  --libdir to lib, --includedir to inc, --sysconfdir to etc,
              --libexec to app, --logfiledir to log, --htdocsdir to  web,  and
              --manualdir to man.


       --prefixes debian|embedthis|opt
              Select  an  installation  prefix  package.  Debian specifies the
              debian recommended installation  locations.  Embedthis  products
              install  by  default with a prefix of /usr/local/lib/PRODUCT and
              symlink exectuables  to  /usr/local/bin.   The  opt  prefix  set
              installs with a prefix of "/opt".


       --profile [debug|release|...]
              Use  the  specified  profile when building. This options is pro-
              vided once when configuring and the result is saved in the plat-
              form.profile property in the configuration bit file. Custom pro-
              files can be added to the main.bit or start.bit files.


       --quiet
              Quiet operation. Suppresses output trace.


       --rebuild
              Rebuild the specified targets. Can also use 'bit rebuild'.


       --reconfigure
              Re-run configuration using the prior configuration settings.


       --release
              Select the release profile. Same as --profile release.


       --rom  Configure setting to build for systems without  a  file  system.
              This  enables  the  ROM file system.  Use the makerom utility to
              process required files into C source code for building with  the
              application.


       --set key=value
              Set a settings property to a given value. For example: 'bit -set
              version=1.0' will update  the  settings.version  property.   Use
              this when running 'bit configure' to persist your changes in the
              configuration bit file.


       --sets [set,set,...]
              Define the groups of files to install. Each product  may  define
              different groups. Typical groups are: core, web, doc, test, etc.


       --show Show the actual commands executed by bit.


       --static
              Configure to  build  using  static  linking  instead  of  shared
              libraries. Same as --set static=true.


       --unicode
              Set the character size to wide.


       --unset key=value
              Clear  a  settings property.  Use this when running 'bit config-
              ure' to persist your changes in the configuration bit file.


       --version
              Print the ejs command version and exit.


       --verbose
              Run in verbose mode with more trace about Bit activities.


       --with PACK[=path]
              Build with the named pack located at the optional path.  If  the
              path  is ommitted, a search is performed for the pack at default
              locations. Packs must have a  pack  description  file  installed
              under 'bits/packs' in the bit installation.


       --without PACK
              Build without the named pack.



REPORTING BUGS
       Report bugs to dev@embedthis.com.

COPYRIGHT
       Copyright  (C)  2004-2013  Embedthis  Software.  Bit and Ejscript are a
       trademarks of Embedthis Software.

SEE ALSO
       ejs



bit                               March 2013                            BIT(1)
