<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="sun.20100810092351.2462"><vh>@chapters</vh>
<v t="sun.20110719094010.2002" a="E"><vh>@settings</vh>
<v t="sun.20110719094010.2003" a="E"><vh>qtGui plugin</vh>
<v t="sun.20110719094010.2004"><vh>@int qt_max_colorized_chars = 200000</vh></v>
<v t="sun.20110719094010.2005"><vh>@bool qt-use-scintilla = False</vh></v>
<v t="sun.20110719094010.2006"><vh>@string qt-ui-file-name = qt_main.ui</vh></v>
<v t="sun.20110719094010.2007"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="sun.20110719094010.2008"><vh>@int qt-scintilla-zoom-in = 6</vh></v>
<v t="sun.20110719094010.2009"><vh>@int qt-rich-text-zoom-in = 10</vh></v>
<v t="sun.20110719094010.2010"><vh>@data qt-scintilla-styles</vh></v>
<v t="sun.20110719094010.2011"><vh>@string qt-default-encoding = UTF-8</vh></v>
<v t="sun.20110719094010.2012"><vh>@@string selected-background-color = #fdf5f5</vh></v>
<v t="sun.20110719094010.2013"><vh>@@string unselected-background-color = #f2fdff</vh></v>
</v>
<v t="sun.20110719094010.2014"><vh>Window</vh>
<v t="sun.20110719094010.2015"><vh>@string initial_split_orientation = horizontal</vh></v>
<v t="sun.20110719094010.2016"><vh>Body pane options</vh>
<v t="sun.20110719094010.2017"><vh>@bool select_all_text_when_editing_headlines = False</vh></v>
<v t="sun.20110719094010.2018"><vh>@bool autoindent_in_nocolor_mode = True</vh></v>
<v t="sun.20110719094010.2019"><vh>@bool body_gmt_time = False</vh></v>
<v t="sun.20110719094010.2020"><vh>@bool body_pane_wraps = True</vh></v>
<v t="sun.20110719094010.2021"><vh>@bool enable_autocompleter_initially = False</vh></v>
<v t="sun.20110719094010.2022"><vh>@bool enable_calltips_initially = False</vh></v>
<v t="sun.20110719094010.2023"><vh>@bool flash_matching_brackets = True</vh></v>
<v t="sun.20110719094010.2024"><vh>@color flash_brackets_background_color = DodgerBlue1</vh></v>
<v t="sun.20110719094010.2025"><vh>@color flash_brackets_foreground_color = white</vh></v>
<v t="sun.20110719094010.2026"><vh>@int flash_brackets_count = 2</vh></v>
<v t="sun.20110719094010.2027"><vh>@int flash-brackets-delay = 75</vh></v>
<v t="sun.20110719094010.2028"><vh>@bool smart_auto_indent = False</vh></v>
<v t="sun.20110719094010.2029"><vh>@bool smart_tab = True</vh></v>
<v t="sun.20110719094010.2030"><vh>@int additional_body_text_border = 0</vh></v>
<v t="sun.20110719094010.2031"><vh>@string body_time_format_string = %m/%d/%Y %H:%M:%S</vh></v>
<v t="sun.20110719094010.2032"><vh>@string editor_orientation = horizontal</vh></v>
</v>
<v t="sun.20110719094010.2033"><vh>Icon bar options</vh></v>
<v t="sun.20110719094010.2034"><vh>@int icon_bar_widgets_per_row = 20</vh></v>
<v t="sun.20110719094010.2035"><vh>Log pane options</vh>
<v t="sun.20110719094010.2036"><vh>@bool log_pane_wraps = False</vh></v>
</v>
<v t="sun.20110719094010.2037"><vh>Options for new windows</vh>
<v t="sun.20110719094010.2038"><vh>@bool big_outline_pane = False</vh></v>
<v t="sun.20110719094010.2039"><vh>@bool outline_pane_has_initial_focus = False</vh></v>
<v t="sun.20110719094010.2040"><vh>@strings[vertical,horizontal] initial_splitter_orientation = horizontal</vh></v>
<v t="sun.20110719094010.2041"><vh>@ratio initial_horizontal_ratio = 0.4</vh></v>
<v t="sun.20110719094010.2042"><vh>@ratio initial_horizontal_secondary_ratio = 0.8</vh></v>
<v t="sun.20110719094010.2043"><vh>@ratio initial_vertical_ratio = 0.5</vh></v>
<v t="sun.20110719094010.2044"><vh>@ratio initial_vertical_secondary_ratio = 0.65</vh></v>
<v t="sun.20110719094010.2045"><vh>@int initial_window_height = 600</vh></v>
<v t="sun.20110719094010.2046"><vh>@int initial_window_left =  20</vh></v>
<v t="sun.20110719094010.2047"><vh>@int initial_window_top = 20</vh></v>
<v t="sun.20110719094010.2048"><vh>@int initial_window_width = 800</vh></v>
</v>
<v t="sun.20110719094010.2049"><vh>Outline pane options</vh>
<v t="sun.20110719094010.2050"><vh>@bool allow_clone_drags = False</vh></v>
<v t="sun.20110719094010.2051"><vh>@bool center_selected_tree_node = True</vh></v>
<v t="sun.20110719094010.2052"><vh>@bool enable_drag_messages = False</vh></v>
<v t="sun.20110719094010.2053"><vh>@bool expanded_click_area = True</vh></v>
<v t="sun.20110719094010.2054"><vh>@bool idle_redraw = False</vh></v>
<v t="sun.20110719094010.2055"><vh>@bool initialClickExpandsOrContractsNode = True</vh></v>
<v t="sun.20110719094010.2056"><vh>@bool invisible_outline_navigation = False</vh></v>
<v t="sun.20110719094010.2057"><vh>@bool look_for_control_drag_on_mouse_down = True</vh></v>
<v t="sun.20110719094010.2058"><vh>@bool outline_pane_scrolls_horizontally = True</vh></v>
<v t="sun.20110719094010.2059"><vh>@float outline_nav_extend_delay = 2.0</vh></v>
<v t="sun.20110719094010.2060"><vh>@bool use_chapters = True</vh></v>
<v t="sun.20110719094010.2061"><vh>@bool use_chapter_tabs = True</vh></v>
</v>
<v t="sun.20110719094010.2062"><vh>Splitter options</vh>
<v t="sun.20110719094010.2063"><vh>@string split_bar_relief = groove</vh></v>
<v t="sun.20110719094010.2064"><vh>@int split_bar_width = 6</vh></v>
</v>
</v>
<v t="sun.20110719094010.2065"><vh>@keys EKR bindings</vh>
<v t="sun.20110719094010.2066"><vh>@shortcuts PyDoc</vh></v>
</v>
</v>
<v t="sun.20110719094142.3727" a="E"><vh>Scripts</vh>
<v t="sun.20110727134412.1288"><vh>&lt;&lt;search_make&gt;&gt;</vh></v>
<v t="sun.20110719094142.3728"><vh>@script startup</vh></v>
<v t="sun.20110719094142.3729"><vh>@button show tree</vh></v>
<v t="sun.20110719094142.3730"><vh>@button hide tree</vh></v>
<v t="sun.20110719094142.3731"><vh>@button make html</vh>
<v t="sun.20110727134412.1288"></v>
</v>
<v t="sun.20110719094142.3734"><vh>@button make pdf</vh>
<v t="sun.20110727134412.1288"></v>
</v>
<v t="sun.20110719094142.3736"><vh>@button clean</vh>
<v t="sun.20110727134412.1288"></v>
</v>
<v t="sun.20110719094142.3738"><vh>@command rst-macro</vh></v>
</v>
</v>
<v t="zry.20110727213002.1294"><vh>@path exts</vh>
<v t="sun.20111205121115.2305" a="E"><vh>中文分词</vh>
<v t="zry.20110727213002.1308"><vh>@edit chinese_search.py</vh></v>
<v t="sun.20111205121115.2306"><vh>@edit zh.py</vh></v>
<v t="sun.20111205121115.2307"><vh>@edit smallseg.py</vh></v>
</v>
<v t="zry.20110731085959.1349"><vh>@edit code_question.py</vh></v>
<v t="sun.20110728140454.1323"><vh>@edit image.py</vh></v>
<v t="zry.20110727213002.1295"><vh>@edit block.py</vh></v>
<v t="zry.20110727213002.1309"><vh>@edit literal_include.py</vh></v>
<v t="zry.20110727213002.1310"><vh>@edit nohighlight.py</vh></v>
<v t="zry.20110727213002.1311"><vh>@edit number_label.py</vh></v>
<v t="zry.20110727213002.1312"><vh>@edit number_ref.py</vh></v>
<v t="zry.20110805195604.1385"><vh>@edit html_figref.py</vh></v>
<v t="zry.20110806153320.1391"><vh>@edit basic.py</vh></v>
<v t="zry.20110910113025.1427"><vh>@edit latex_fix.py</vh></v>
<v t="zry.20110727213002.1317"><vh>Theme book</vh>
<v t="zry.20110727213002.1316"><vh>@edit theme/book/static/book.css</vh></v>
<v t="zry.20110727213002.1318"><vh>@edit theme/book/layout.html</vh></v>
</v>
</v>
<v t="sun.20110726124944.1287" a="E"><vh>@path sphinx_book</vh>
<v t="sun.20110726124944.1278" a="E"><vh>@path source</vh>
<v t="sun.20100810092351.2461"><vh>@auto conf.py</vh></v>
<v t="sun.20110726124944.1288" a="E"><vh>用Sphinx写书</vh>
<v t="sun.20110719094142.1252" a="E"><vh>@auto-rst index.rst</vh></v>
<v t="sun.20110725111218.1281"><vh>@auto-rst setup.rst</vh></v>
<v t="sun.20110727134412.1290"><vh>@auto-rst exts.rst</vh></v>
<v t="sun.20110719094142.2894"><vh>@auto-rst leo.rst</vh></v>
<v t="sun.20110728140454.1318" a="E"><vh>@auto-rst tips.rst</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="sun.20100810092351.2462"></t>
<t tx="sun.20110719094010.2002"></t>
<t tx="sun.20110719094010.2003"></t>
<t tx="sun.20110719094010.2004">If zero, all nodes are colorized, regardless of length of body text.
If &gt; 0, only nodes whose body text are smaller than this limit are colorized.</t>
<t tx="sun.20110719094010.2005"></t>
<t tx="sun.20110719094010.2006"></t>
<t tx="sun.20110719094010.2007">/* Documentation of Qt stylesheets at http://doc.trolltech.com/4.2/stylesheet.html */

/* Valid color names: http://www.w3.org/TR/SVG/types.html#ColorKeywords */

/* A QWidget: supports only background attributes.*/

QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    font-size: 12px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    font-size: 12px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    font-size: 12px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    font-size: 14px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;
    font-size: 12px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    font-size: 12px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}

/* The mini-buffer */
QLineEdit#lineEdit {
    selection-color: white;
    selection-background-color: lightgrey;
    font-family:YaHei Mono;
    font-size: 12px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLineEdit#status1 {
    background-color: lightgrey;
    border-width: 1px;
    border-style: solid;
    border-color: darkgrey;
}

QLineEdit#status2 {
    background-color: lightgrey;
    border-width: 1px;
    border-style: solid;
    border-color: darkgrey;
}

XXQPushButton {
    background-color: #fdf5f5; /* A kind of pink. */
    margin: 2px;
    padding; 4px;
    border-width: 2px;
    border-style: solid;
    border-color: darkgrey;
}

/* QMenuBar works, but not QMenu... */
XXQMenuBar {
    font-family:YaHei Mono;
    font-size: 12px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}</t>
<t tx="sun.20110719094010.2008">Argument to QSciScintilla.zoomIn method.
This allows you to increase the font size.</t>
<t tx="sun.20110719094010.2009">Argument to QSciScintilla.zoomIn method.
This allows you to increase the font size.</t>
<t tx="sun.20110719094010.2010"># Lines have the form: color, style
# color may be any kind of Qt color specifier
# The valid sytles are as follows: (capitalization is significant).
# Default Comment Number Keyword
# DoubleQuotedString SingleQuotedString
# TripleSingleQuotedString TripleDoubleQuotedString
# ClassName FunctionMethodName
# Operator Identifier
# CommentBlock UnclosedString
# HighlightedIdentifier Decorator

 red,   Comment
 green, SingleQuotedString
 green, DoubleQuotedString
 green, TripleSingleQuotedString
 green, TripleDoubleQuotedString
 green, UnclosedString
 green, Decorator
 blue,  Keyword</t>
<t tx="sun.20110719094010.2011">@nocolor

The encoding assumed for strings used by the Qt plugin.
UTF-8 is a reasonable default.
Change to your Python's default encoding if you have unicode problems.</t>
<t tx="sun.20110719094010.2012">A kind of pink</t>
<t tx="sun.20110719094010.2013">A kind of blue</t>
<t tx="sun.20110719094010.2014">Options that require pixel values can be any Python expression that yields an int.
Warning: the number of pixels per inch varies...</t>
<t tx="sun.20110719094010.2015">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="sun.20110719094010.2016"></t>
<t tx="sun.20110719094010.2017">True: (legacy) Select all headline text when editing a headline.
False: Put the cursor at the end of the headline text.</t>
<t tx="sun.20110719094010.2018">True:  auto-indent regardless of how text is colored.
False: suppress auto-indenting if in range @nocolor or @kill.</t>
<t tx="sun.20110719094010.2019">True:  use gmt time.
False: use local time.</t>
<t tx="sun.20110719094010.2020">True: Wrap body text.

</t>
<t tx="sun.20110719094010.2021">True:  enable autocompletion initially.
False: disable autocomopletion initially.

You can use the enable-autocompleter and disable-autocompleter
commands to enable or disable autocompletion at any time.

Note: The 'initially' prefix is needed to distinguish this setting from
enable-autocompleter command. Otherwised they would get 'munged' to the same
configuration value.</t>
<t tx="sun.20110719094010.2022">True:  enable calltip expansion initially.
False: disable calltip expansion initially.

You can use the enable-calltips and disable-calltips
commands to enable or disable autocompletion at any time.

Note: The 'initially' prefix is needed to distinguish this setting from
enable-calltips command. Otherwised they would get 'munged' to the same
configuration value.</t>
<t tx="sun.20110719094010.2023">True: flash matching bracket when typing (, ), [, ], { or }.</t>
<t tx="sun.20110719094010.2024"></t>
<t tx="sun.20110719094010.2025"></t>
<t tx="sun.20110719094010.2026">The number of times to flash matching brackets.</t>
<t tx="sun.20110719094010.2027">One half the total cycle time of bracket flashes, in milliseconds.</t>
<t tx="sun.20110719094010.2028">True:  auto-indent aligns with open ({[ brackets

False: auto-indent increases indentation by one tab for Python only.</t>
<t tx="sun.20110719094010.2029"></t>
<t tx="sun.20110719094010.2030">Additional border in body text pane, in pixels.</t>
<t tx="sun.20110719094010.2031">The format string used when creating the Time/Date string for the Insert Time/Date command.
See the Python documentation for time.strftime for full details.

Examples:

1/30/2003 8:31:55
%m/%d/%y %H:%M:%S

Thu, 30 Jan 2003 16:57:12
%a, %d %b %Y %H:%M:%S</t>
<t tx="sun.20110719094010.2032">vertical:   pack body-pane editors vertically.
horizontal: pack body-pane editors horizontally.</t>
<t tx="sun.20110719094010.2033"></t>
<t tx="sun.20110719094010.2034">The number of buttons or widget in any one row of icons in the icon area.
If there are more than this number, a new row is created.</t>
<t tx="sun.20110719094010.2035"></t>
<t tx="sun.20110719094010.2036">True: Wrap body text.

</t>
<t tx="sun.20110719094010.2037">These options apply only to windows opened with the New command.</t>
<t tx="sun.20110719094010.2038">False (legacy): Top pane contains outline and log panes.
True: Top pane contains only outline.  Bottom pane contains body and log panes.</t>
<t tx="sun.20110719094010.2039">True: Outline gets focus when a new window is opened.
False Body pane gets focus when a new window is opened.</t>
<t tx="sun.20110719094010.2040">Defines the primary splitter orientation.

The primary panes are the body pane and the secondary pane.
The secondary pane contains the outline and log panes.

vertical: body pane below outline and log panes.
horizontal: body pane to right of outline and log panes.

The so-called 'primary' ratio is the ratio between the body pane and the pane
containing the other two panes. The so-called secondary ratio is the ratio
between sizes of the log pane and the outline pane.

The thing to keep in mind is that Leo saves *only* the primary ratio in .leo
files. Leo does not save the so-called 'secondary' ratio in .leo files, because
doing so would change Leo's file format.

Because Leo **does** save the primary ratio in .leo files, Leo will open a file
with the same primary ratio that you had when you last saved the file.

Because Leo does **not** save the secondary ratio in the .leo file Leo
determines the relative sizes of the log and outline panes from settings in
leoSettings.leo. One of the two settings is used:

- initial_horizontal_secondary_ratio or

- initial_vertical_secondary_ratio

Which one is used depends on the initial_splitter_orientation setting.

**Important** If you change these settings you must restart Leo for them to take effect.

Here are some further notes adapted from comments from Paul Paterson:

Leo also doesn't save the split direction. This can be confusing, because if you
save a horizontal split file but your default split is vertical, then when you
reload and correct the split Leo has forgotten the ratio!  To restate:

- if you change the split direction (window .. toggle split) Leo resets the
split ratios.

- if you save a Leo file with a split other than the default (in settings) Leo
won't remember that.
</t>
<t tx="sun.20110719094010.2041">The ratio of tree pane size to body pane size when splitting primary panes horizontally.

Valid values: 0.0 to 1.0.

**Important**: Leo **does** save this ratio when saving a .leo file, so Leo
always uses this ratio only when creating a new outline.</t>
<t tx="sun.20110719094010.2042">The ratio of outline (tree) pane size to log pane size when splitting the primary panes horizontally.

Valid values: 0.0 to 1.0.

**Important**: Leo does not save this ratio when saving a .leo file, so Leo
always uses this ratio when opening a file that is being split horizontally.</t>
<t tx="sun.20110719094010.2043">The ratio of tree pane size to body pane size when splitting primary panes vertically.

Valid values: 0.0 to 1.0.

**Important**: Leo **does** save this ratio when saving a .leo file, so Leo
always uses this ratio only when creating a new outline.</t>
<t tx="sun.20110719094010.2044">The ratio of outline (tree) pane size to log pane size when splitting the primary panes vertically.

Valid values: 0.0 to 1.0.

**Important**: Leo does not save this ratio when saving a .leo file, so Leo
always uses this ratio when opening a file that is being split vertically.</t>
<t tx="sun.20110719094010.2045">Height of window in pixels.
    
</t>
<t tx="sun.20110719094010.2046">Distance from left of screen of window, in pixels.
</t>
<t tx="sun.20110719094010.2047">Distance from top of screen of window, in pixels.</t>
<t tx="sun.20110719094010.2048">Width window in pixels.

</t>
<t tx="sun.20110719094010.2049"></t>
<t tx="sun.20110719094010.2050">True:  Allows control-dragging to create clones.
False: All drags move nodes.

See also: look_for_control_drag_on_mouse_down
Setting this setting to False allows Leo to be used on Aqua.</t>
<t tx="sun.20110719094010.2051">True (Recommended): Leo scrolls the outline to put the selected node near the center of the outline pane.
False (Legacy): Leo scrolls the outline to put the selected node at the top or bottom of the outline pane.</t>
<t tx="sun.20110719094010.2052">True:  Tell whether drags will move nodes or clone nodes.
False: Don't issue such messages.

</t>
<t tx="sun.20110719094010.2053">1: Click near a node expands or contracts the node.
0: Only clicks in a node's plus/minus box expands or contracts the node.

Note:  @bool expanded_click_area = True conflicts with the UniversalScrolling plugin.</t>
<t tx="sun.20110719094010.2054"></t>
<t tx="sun.20110719094010.2055">True:  Clicking anywhere in an unselected node selects the node and *also* expands or contracts it.
False: Clicking an unselected node just selects the node, unless the click happens in the expand/contract box.</t>
<t tx="sun.20110719094010.2056">This option tells how to treat an uppercase letter typed when the outline pane
is active but no headline is being edited. In such situations Leo searchs for an
node whose headline starts with the present prefix, ignoring case The prefix
starts with the first letter typed and other letters are added if they are typed
within a 'short' period of time, as specified by the outline_nav_extend_delay

True: Look in invisible nodes.
False: Look only in visible nodes.

I set this option to False because it is too easy form me to type Shift-whatever when I meant Ctrl-whatever.</t>
<t tx="sun.20110719094010.2057">This option controls the interpretation of the control key when dragging nodes in the outline pane.

True: A drag is a control-drag if the control key is down at the start of the drag.

False: A drag is a control-drag if the control key is down at the end of the drag.</t>
<t tx="sun.20110719094010.2058">True: Use horizontal scrollbar in outline pane.</t>
<t tx="sun.20110719094010.2059">This setting appears in two places: 'Keyboard and minibuffer options' and 'Outline pane options'.

A time (in seconds) that controls how handles keystrokes when the outline pane has focus.

When two keystrokes are separated by less than this time, Leo will attempt to
find the next headline that starts with the previous match, extended by the key
just typed. Otherwise, Leo will find the next headline that starts with the key
just typed.

The outline nav search reverts to a single-character search if the extended
search fails, so in practice everything works well without thinking about what
is happening.
</t>
<t tx="sun.20110719094010.2060">True:  Chapter commands are functional.
False: Chapter commands do not exists.</t>
<t tx="sun.20110719094010.2061">True:  Chapter tabs appear in the outline pane.
False: Chapter tabs do not appear.</t>
<t tx="sun.20110719094010.2062"></t>
<t tx="sun.20110719094010.2063">The Tk -relief option for the split bar.</t>
<t tx="sun.20110719094010.2064">The width of the split bar, in pixels (must be an integer).</t>
<t tx="sun.20110719094010.2065"></t>
<t tx="sun.20110719094010.2066">rst-macro                = Ctrl-1</t>
<t tx="sun.20110719094142.3727"></t>
<t tx="sun.20110719094142.3728">@first #coding:utf-8 
# 自启动程序由于其危险性，缺省是关闭的，请设置myLeoSettings.leo中的
# @bool scripting-at-script-nodes = True
# 以开启自启动
c.frame.resizePanesToRatio(0.25,0.7)</t>
<t tx="sun.20110719094142.3729">g.es(c.frame.resizePanesToRatio(0.25,0.7))</t>
<t tx="sun.20110719094142.3730">g.es(c.frame.resizePanesToRatio(0.0,0.7))</t>
<t tx="sun.20110719094142.3731">@first #coding:utf-8 
"""
本程序寻找当前节点的路径以及所有父路径下的make.bat文件，
当找到时，运行make.bat html命令，编译html文档。
并根据父节点中的@auto-rst，打开相应的html文档。
"""
def process():            
    os.system("make.bat html")
    for parent in p.self_and_parents_iter():
        if parent.h.startswith('@auto-rst'):
            html_name = parent.h.replace('@auto-rst ', '').replace('.rst', '')
            break
    else:
        html_name = 'index'
    os.system(r"build\html\%s.html" % html_name)
    
&lt;&lt;search_make&gt;&gt;</t>
<t tx="sun.20110719094142.3734">@first #coding:utf-8 
"""
本程序寻找当前节点的路径以及所有父路径下的make.bat文件，
当找到时，运行make.bat latex命令，编译latex文档。
"""

def process():
    conf = {}
    execfile(r"source\conf.py", conf)
    target_name = conf["latex_documents"][0][1]
    g.es(target_name)
    os.system("make.bat latex")
    os.chdir("build/latex")
    os.system("xelatex %s -interaction=nonstopmode -quiet" % target_name)
    os.system("xelatex %s -interaction=nonstopmode -quiet" % target_name)                        
    os.system(target_name.replace(".tex", ".pdf"))

&lt;&lt;search_make&gt;&gt;</t>
<t tx="sun.20110719094142.3736">@first #coding:utf-8 
def process():
    os.system("make.bat clean")

&lt;&lt;search_make&gt;&gt;</t>
<t tx="sun.20110719094142.3738">@first #coding:utf-8 

import re
from string import Template

macros = (
    "foot",u".. rubric:: 注释\n\n.. [#|] ",
    "table",".. table:: ",
    "inc&gt;(.+?)&gt;(.+?)",".. literalinclude:: codes/$o0|\n    :section: $o1",
    "inc",".. literalinclude:: codes/|\n    :section: 1",
    "inc&gt;(.+?)",".. literalinclude:: codes/$o0|\n    :section: 1",
    "math",".. math::\n    \n    ",
    "fig&gt;(.+?)",u"\ :ref:`fig-$s0`\ \n\n.. _fig-$s0:\n\n.. figure:: images/$o0.png\n    :width: 12.0cm\n\n    标题",
    "fig","\ :ref:`fig-|`\ ",
    "_s",".. _sec-|:\n",
    "_f",".. _fig-|:\n",
    "sec","\ :ref:`sec-|`\ ",
    "m",u"\ :math:`|`\ ",
    "tl",".. tlink::\n\n    ",
    "tt",".. ttip::\n\n    ",
    "tth",".. tthink::\n\n    ",
    "tw",".. twarning::\n\n    ",
    "tc",".. tcode::\n\n    ",
    "ta",".. tanim::\n\n    ",
    "cb",".. code-block:: none\n\n    ",
    "t",".. topic:: |\n\n    ",
    "l","\ `| &lt;http://&gt;`_\ ",
    "1",u"❶",
    "2",u"❷",
    "3",u"❸",
    "4",u"❹",
    "5",u"❺",
    "6",u"❻",
    "7",u"❼",
    "8",u"❽",
    "9",u"❾",
    "0",u"❿",
    "-&gt;",u"→",
    "\[","\ [#|]_\ ",
)

macros = [(x,y) for x,y in zip(macros[::2], macros[1::2])]

def tuple2dict(t):
    d = {}
    i = 0
    for tmp in t:
        for item in tmp.split("&gt;"):
            d["o"+str(i)] = item
            d["s"+str(i)] = item.replace("_","").replace("-","") 
            i+=1
    return d

def expand_macro(line):
    #for key in macros.keys():
    for key, macro in macros:
        r = re.search(key + "$", line)
        if r:
            return r.start(), Template(macro).safe_substitute(tuple2dict(r.groups()))
    return None

w = c.frame.body.bodyCtrl
i = w.getInsertPoint()
pos = i
while pos&gt;0:
    char = w.get(pos-1, pos)
    pos -= 1
    if char == "\n": break
line = w.get(pos, i).strip()
pos = i - len(line)
line = w.get(pos, i)
result = expand_macro(line)
if result != None:
    pos = pos+result[0]
    text = result[1]
    try:
        cursorpos = text.index("|")
    except:
        cursorpos = len(text)
    text = text.replace("|","")
@    
    if pos&gt;0 and w.get(pos-1, pos) != "\n" and w.get(pos-1, pos) != " ":
        text = "\ " + result[1]
@c 
    w.replace(pos, i, text)
    w.setInsertPoint(pos + cursorpos)</t>
<t tx="sun.20110726124944.1278"></t>
<t tx="sun.20110726124944.1287"></t>
<t tx="sun.20110726124944.1288"></t>
<t tx="sun.20110727134412.1288">import os
import os.path as path
cwd = os.getcwd()
try:
    d = c.scanAllDirectives(p)
    _path = d.get('path')
    while True:
        make_path = path.join(_path, "make.bat")
        if path.exists(make_path):
            os.chdir(_path)
            process()
            break
        else:
            if path.dirname(_path) == _path:
                break
            _path = path.dirname(_path)
finally:
    os.chdir(cwd)</t>
<t tx="sun.20111205121115.2305"></t>
<t tx="zry.20110727213002.1294"></t>
<t tx="zry.20110727213002.1317"></t>
</tnodes>
</leo_file>
