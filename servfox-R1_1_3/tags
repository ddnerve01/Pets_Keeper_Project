!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BIN	Makefile	/^BIN=\/usr\/local\/bin$/;"	m
BPPIN	spcav4l.h	50;"	d
BRIDGE_CX11646	spcav4l.h	/^	BRIDGE_CX11646,$/;"	e	enum:__anon1
BRIDGE_ETOMS	spcav4l.h	/^	BRIDGE_ETOMS,$/;"	e	enum:__anon1
BRIDGE_MR97311	spcav4l.h	/^	BRIDGE_MR97311,$/;"	e	enum:__anon1
BRIDGE_SN9CXXX	spcav4l.h	/^	BRIDGE_SN9CXXX,$/;"	e	enum:__anon1
BRIDGE_SONIX	spcav4l.h	/^	BRIDGE_SONIX,$/;"	e	enum:__anon1
BRIDGE_SPCA500	spcav4l.h	/^	BRIDGE_SPCA500,$/;"	e	enum:__anon1
BRIDGE_SPCA501	spcav4l.h	/^	BRIDGE_SPCA501,$/;"	e	enum:__anon1
BRIDGE_SPCA504	spcav4l.h	/^	BRIDGE_SPCA504,$/;"	e	enum:__anon1
BRIDGE_SPCA504B	spcav4l.h	/^	BRIDGE_SPCA504B,$/;"	e	enum:__anon1
BRIDGE_SPCA504C	spcav4l.h	/^	BRIDGE_SPCA504C,$/;"	e	enum:__anon1
BRIDGE_SPCA505	spcav4l.h	/^	BRIDGE_SPCA505 = 0,$/;"	e	enum:__anon1
BRIDGE_SPCA506	spcav4l.h	/^        BRIDGE_SPCA506,$/;"	e	enum:__anon1
BRIDGE_SPCA508	spcav4l.h	/^	BRIDGE_SPCA508,$/;"	e	enum:__anon1
BRIDGE_SPCA533	spcav4l.h	/^	BRIDGE_SPCA533,$/;"	e	enum:__anon1
BRIDGE_SPCA536	spcav4l.h	/^	BRIDGE_SPCA536,$/;"	e	enum:__anon1
BRIDGE_SPCA561	spcav4l.h	/^	BRIDGE_SPCA561,$/;"	e	enum:__anon1
BRIDGE_TV8532	spcav4l.h	/^	BRIDGE_TV8532,$/;"	e	enum:__anon1
BRIDGE_UNKNOW	spcav4l.h	/^	BRIDGE_UNKNOW,$/;"	e	enum:__anon1
BRIDGE_ZC3XX	spcav4l.h	/^	BRIDGE_ZC3XX,$/;"	e	enum:__anon1
BRIDGE_ZR364XX	spcav4l.h	/^	BRIDGE_ZR364XX,$/;"	e	enum:__anon1
Blist	spcav4l.c	/^static struct bridge_list Blist[]={$/;"	v	typeref:struct:bridge_list	file:
CC	Makefile	/^CC=\/opt\/toolchains\/arm-2009q3\/bin\/arm-none-linux-gnueabi-gcc$/;"	m
CHGABRIGHT	spcav4l.h	68;"	d
CHGQUALITY	spcav4l.h	69;"	d
CHGTINTER	spcav4l.h	70;"	d
CIF	spcav4l.h	56;"	d
CLIENT_PORT	tcputils.h	38;"	d
GBGR	spcav4l.h	/^	GBGR,$/;"	e	enum:__anon2
GBRG	spcav4l.h	/^	GBRG,$/;"	e	enum:__anon2
GREY	spcav4l.h	/^	GREY,$/;"	e	enum:__anon2
GetDepth	spcav4l.c	/^GetDepth (int format)$/;"	f	file:
GetStreamId	spcav4l.c	/^GetStreamId (const char *BridgeName)$/;"	f	file:
GetVideoPict	spcav4l.c	/^GetVideoPict (struct vdIn *vd)$/;"	f	file:
HEIGHT	spcav4l.h	49;"	d
INSTALL	Makefile	/^INSTALL=install$/;"	m
INSTALLROOT	Makefile	/^INSTALLROOT=$(PWD)$/;"	m
JPEG	spcav4l.h	/^	JPEG = 0,$/;"	e	enum:__anon2
JPG	spcav4l.h	61;"	d
MASQ	spcav4l.h	52;"	d
MAXCONNECT	tcputils.h	36;"	d
MAX_BRIDGE	spcav4l.h	/^	MAX_BRIDGE,$/;"	e	enum:__anon1
OBJSERVER	Makefile	/^OBJSERVER= server.o spcav4l.o utils.o tcputils.o $/;"	m
OUTFRMNUMB	spcav4l.c	27;"	d	file:
PAL	spcav4l.h	54;"	d
QCIF	spcav4l.h	59;"	d
QPAL	spcav4l.h	57;"	d
QSIF	spcav4l.h	58;"	d
RGB24	spcav4l.h	63;"	d
RGB32	spcav4l.h	65;"	d
RGB565	spcav4l.h	64;"	d
SERVEUR_ADR	tcputils.h	39;"	d
SERVEUR_PORT	tcputils.h	37;"	d
SERVFLAGS	Makefile	/^SERVFLAGS= -O2 -DLINUX $(WARNINGS) -I\/home\/timonkun\/Workspace\/Linux设备驱动光盘\/sd-card\/source\/android-kernel-samsung-dev-full\/include$/;"	m
SERVLIBS	Makefile	/^SERVLIBS= -lpthread -static$/;"	m
SIF	spcav4l.h	55;"	d
SN9C	spcav4l.h	/^	SN9C,$/;"	e	enum:__anon2
SPCAGVIDIOPARAM	spcav4l.h	76;"	d
SPCASVIDIOPARAM	spcav4l.h	77;"	d
SPCAV4L_H	spcav4l.h	25;"	d
SetVideoPict	spcav4l.c	/^SetVideoPict (struct vdIn *vd)$/;"	f	file:
SpcaGetBrightness	spcav4l.c	/^SpcaGetBrightness (struct vdIn * vdin)$/;"	f
SpcaGetColors	spcav4l.c	/^SpcaGetColors (struct vdIn *vdin)$/;"	f
SpcaGetContrast	spcav4l.c	/^SpcaGetContrast (struct vdIn *vdin)$/;"	f
SpcaSetBrightness	spcav4l.c	/^SpcaSetBrightness (struct vdIn *vdin, __u8 bright)$/;"	f
SpcaSetColors	spcav4l.c	/^SpcaSetColors (struct vdIn *vdin, __u8 colors)$/;"	f
SpcaSetContrast	spcav4l.c	/^SpcaSetContrast (struct vdIn *vdin, __u8 contrast)$/;"	f
TCPUTILS_H	tcputils.h	25;"	d
UNOW	spcav4l.h	/^	UNOW,$/;"	e	enum:__anon2
UTILS_H	utils.h	25;"	d
VGA	spcav4l.h	53;"	d
VIDEO_PALETTE_JPEG	spcav4l.h	46;"	d
WIDTH	spcav4l.h	48;"	d
YUV420P	spcav4l.h	62;"	d
YUVY	spcav4l.h	/^	YUVY,$/;"	e	enum:__anon2
YUYV	spcav4l.h	/^	YUYV,$/;"	e	enum:__anon2
YYUV	spcav4l.h	/^	YYUV,$/;"	e	enum:__anon2
acknowledge	spcaframe.h	/^	int acknowledge;$/;"	m	struct:frame_t
autobright	spcav4l.h	/^	__u8 autobright;$/;"	m	struct:video_param
bppIn	spcav4l.h	/^	int bppIn;$/;"	m	struct:vdIn
bridge	spcav4l.h	/^	char bridge[9];$/;"	m	struct:vdIn
bridge_list	spcav4l.h	/^struct bridge_list {$/;"	s
bright	spcaframe.h	/^	unsigned short bright;$/;"	m	struct:frame_t
cameraname	spcav4l.h	/^	char *cameraname;$/;"	m	struct:vdIn
cameratype	spcav4l.h	/^	int cameratype ;$/;"	m	struct:vdIn
changeSize	spcav4l.c	/^changeSize (struct vdIn *vd)$/;"	f
channel	spcav4l.h	/^	int channel ; \/\/ set spca506 usb video grabber$/;"	m	struct:vdIn
chg_para	spcav4l.h	/^	int chg_para;$/;"	m	struct:video_param
client_t	spcaframe.h	/^struct client_t{$/;"	s
close_sock	tcputils.c	/^close_sock (int sockhandle)$/;"	f
close_v4l	spcav4l.c	/^close_v4l (struct vdIn *vd)$/;"	f
colors	spcaframe.h	/^	unsigned short colors;$/;"	m	struct:frame_t
contrast	spcaframe.h	/^	unsigned short contrast;$/;"	m	struct:frame_t
convertframe	spcav4l.c	/^convertframe(unsigned char *dst,unsigned char *src, int width,int height, int formatIn, int size)$/;"	f
debug	server.c	/^static int debug = 0;$/;"	v	file:
debug	spcav4l.c	/^static int debug = 0;$/;"	v	file:
deltatimes	spcaframe.h	/^	int deltatimes;$/;"	m	struct:frame_t
downbright	spcav4l.c	/^unsigned short downbright( struct vdIn *vdin)$/;"	f
downcontrast	spcav4l.c	/^unsigned short downcontrast( struct vdIn *vdin)$/;"	f
exit_fatal	utils.c	/^void exit_fatal(char *messages)$/;"	f
exposure	spcaframe.h	/^	unsigned short exposure;$/;"	m	struct:frame_t
fd	spcav4l.h	/^	int fd;$/;"	m	struct:vdIn
format	spcaframe.h	/^	int format;$/;"	m	struct:frame_t
formatIn	spcav4l.h	/^	int  formatIn;$/;"	m	struct:vdIn
fps	spcaframe.h	/^	unsigned char fps;$/;"	m	struct:client_t
frame_cour	spcav4l.h	/^	volatile int frame_cour;$/;"	m	struct:vdIn
frame_t	spcaframe.h	/^struct frame_t{$/;"	s
framelock	spcav4l.h	/^	int framelock[4];$/;"	m	struct:vdIn
framesizeIn	spcav4l.h	/^	int framesizeIn ;$/;"	m	struct:vdIn
get_jpegsize	utils.c	/^get_jpegsize (unsigned char *buf, int insize)$/;"	f
grab	server.c	/^grab (void)$/;"	f
grabMethod	spcav4l.h	/^	int grabMethod ;$/;"	m	struct:vdIn
grabmutex	spcav4l.h	/^	pthread_mutex_t grabmutex;$/;"	m	struct:vdIn
h	spcaframe.h	/^	int h;$/;"	m	struct:frame_t
hdrheight	spcav4l.h	/^	int  hdrheight;$/;"	m	struct:vdIn
hdrwidth	spcav4l.h	/^	int  hdrwidth;$/;"	m	struct:vdIn
header	spcaframe.h	/^	char header[5];$/;"	m	struct:frame_t
init_v4l	spcav4l.c	/^init_v4l (struct vdIn *vd)$/;"	f	file:
init_videoIn	spcav4l.c	/^init_videoIn (struct vdIn *vd, char *device, int width, int height,$/;"	f
initaddr	tcputils.c	/^initaddr (struct sockaddr_in *servadrr,char *address,int port)$/;"	f	file:
isSpcaChip	spcav4l.c	/^isSpcaChip (const char *BridgeName)$/;"	f	file:
main	server.c	/^main (int argc, char *argv[])$/;"	f
message	spcaframe.h	/^	char message[4];$/;"	m	struct:client_t
mmapsize	spcav4l.h	/^	int mmapsize;$/;"	m	struct:vdIn
ms_time	utils.c	/^ms_time (void)$/;"	f
name	spcav4l.h	/^	const char *name;$/;"	m	struct:bridge_list
name	spcav4l.h	/^	const char *name;$/;"	m	struct:palette_list
nbframe	spcaframe.h	/^	int nbframe;$/;"	m	struct:frame_t
norme	spcav4l.h	/^	int norme ; \/\/ set spca506 usb video grabber$/;"	m	struct:vdIn
num	spcav4l.h	/^	int num;$/;"	m	struct:bridge_list
num	spcav4l.h	/^	int num;$/;"	m	struct:palette_list
open_clientsock	tcputils.c	/^int open_clientsock(char * address, int port)$/;"	f
open_sock	tcputils.c	/^open_sock (int port)$/;"	f
pFramebuffer	spcav4l.h	/^	unsigned char *pFramebuffer;$/;"	m	struct:vdIn
palette	spcav4l.h	/^	int palette; \/\/ available palette$/;"	m	struct:vdIn
palette_list	spcav4l.h	/^struct palette_list {$/;"	s
ptframe	spcav4l.h	/^	unsigned char *ptframe[4];$/;"	m	struct:vdIn
quality	spcav4l.h	/^	__u8 quality;$/;"	m	struct:video_param
qualityDown	spcav4l.c	/^qualityDown(struct vdIn *vdin)$/;"	f
qualityUp	spcav4l.c	/^qualityUp(struct vdIn *vdin)$/;"	f
read_sock	tcputils.c	/^read_sock (int sockhandle, unsigned char *buf, int length)$/;"	f
reportip	tcputils.c	/^reportip( char *src, char *ip, unsigned short *port)$/;"	f
seqtimes	spcaframe.h	/^	double seqtimes;$/;"	m	struct:frame_t
service	server.c	/^service (void *ir)$/;"	f
sigchld_handler	server.c	/^void sigchld_handler(int s)$/;"	f
signalquit	spcav4l.h	/^	int signalquit;	$/;"	m	struct:vdIn
size	spcaframe.h	/^	int size;$/;"	m	struct:frame_t
sizenative	spcav4l.h	/^	int sizenative; \/\/ available size in jpeg$/;"	m	struct:vdIn
sizeothers	spcav4l.h	/^	int sizeothers;	\/\/ others palette $/;"	m	struct:vdIn
sleepon	spcaframe.h	/^	unsigned char sleepon;$/;"	m	struct:client_t
spcaPrintParam	spcav4l.c	/^static void spcaPrintParam (int fd, struct video_param *videoparam)$/;"	f	file:
spcaSetAutoExpo	spcav4l.c	/^spcaSetAutoExpo(struct vdIn *vdin)$/;"	f
spcaSetQuality	spcav4l.c	/^static void spcaSetQuality(int fd, struct video_param *videoparam, unsigned char qindex)$/;"	f	file:
spcaSetTimeInterval	spcav4l.c	/^static void spcaSetTimeInterval(int fd, struct video_param *videoparam, unsigned short dtime)$/;"	f	file:
timeDown	spcav4l.c	/^timeDown(struct vdIn *vdin)$/;"	f
timeUp	spcav4l.c	/^timeUp(struct vdIn *vdin)$/;"	f
time_interval	spcav4l.h	/^	__u16 time_interval;$/;"	m	struct:video_param
upbright	spcav4l.c	/^unsigned short upbright( struct vdIn *vdin)$/;"	f
upcontrast	spcav4l.c	/^unsigned short upcontrast( struct vdIn *vdin)$/;"	f
updobright	spcaframe.h	/^	unsigned char updobright;$/;"	m	struct:client_t
updocolors	spcaframe.h	/^	unsigned char updocolors;$/;"	m	struct:client_t
updocontrast	spcaframe.h	/^	unsigned char updocontrast;$/;"	m	struct:client_t
updoexposure	spcaframe.h	/^	unsigned char updoexposure;$/;"	m	struct:client_t
updosize	spcaframe.h	/^	unsigned char updosize;$/;"	m	struct:client_t
v4lGrab	spcav4l.c	/^v4lGrab (struct vdIn *vd )$/;"	f
vdIn	spcav4l.h	/^struct vdIn {$/;"	s
version	version.h	/^ char version[] = "servfox version: 1.1.3 date: 11:12:2005 (C) mxhaard@magic.fr\\0";$/;"	v
videoIn	server.c	/^struct vdIn videoIn;$/;"	v	typeref:struct:vdIn
video_param	spcav4l.h	/^struct video_param {$/;"	s
videocap	spcav4l.h	/^	struct video_capability videocap;$/;"	m	struct:vdIn	typeref:struct:vdIn::video_capability
videochan	spcav4l.h	/^	struct video_channel videochan;$/;"	m	struct:vdIn	typeref:struct:vdIn::video_channel
videodevice	spcav4l.h	/^	char *videodevice ;$/;"	m	struct:vdIn
videombuf	spcav4l.h	/^	struct video_mbuf videombuf;$/;"	m	struct:vdIn	typeref:struct:vdIn::video_mbuf
videoparam	spcav4l.h	/^	struct video_param videoparam;		$/;"	m	struct:vdIn	typeref:struct:vdIn::video_param
videopict	spcav4l.h	/^	struct video_picture videopict;$/;"	m	struct:vdIn	typeref:struct:vdIn::video_picture
videowin	spcav4l.h	/^	struct video_window videowin;$/;"	m	struct:vdIn	typeref:struct:vdIn::video_window
vmmap	spcav4l.h	/^	struct video_mmap vmmap;$/;"	m	struct:vdIn	typeref:struct:vdIn::video_mmap
w	spcaframe.h	/^	int w;$/;"	m	struct:frame_t
wakeup	spcaframe.h	/^	unsigned char wakeup;$/;"	m	struct:frame_t
write_sock	tcputils.c	/^write_sock (int sockhandle, unsigned char *buf, int length)$/;"	f
x	spcaframe.h	/^	unsigned char x;$/;"	m	struct:client_t
y	spcaframe.h	/^	unsigned char y;$/;"	m	struct:client_t
